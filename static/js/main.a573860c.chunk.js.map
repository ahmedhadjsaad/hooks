{"version":3,"sources":["cinema.svg","NavBar/NavBar.js","MovieCard/MovieCard.js","MovieList/MovieList.js","Title/Title.js","MovieComponent/MovieComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","className","MovieCard","props","Card","style","margin","id","Img","source","ImgOverlay","Title","title","Text","description","rating","MovieList","useState","show","setShow","handleClose","movie","setMovie","Titre","setTitre","setDescription","setRating","setSrc","filter","el","toLowerCase","includes","search","stars","map","i","key","textAlign","Button","onClick","Modal","onHide","Header","closeButton","type","placeholder","size","onChange","event","target","value","Body","paddingTop","Footer","a","b","c","d","fontFamily","letterSpacing","marginTop","marginBottom","MovieComponent","setSearch","setStars","Form","inline","FormControl","e","count","activeColor","newRating","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a573860c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cinema.eff22c61.svg\";","import React from 'react';\nimport {Navbar} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logo from '../cinema.svg';\nconst NavBar = () => {\n\n    return(\n    <>\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">\n    <img\n        alt=\"Pop Corn in red box\"\n        src={logo}\n        width=\"30\"\n        height=\"30\"\n        className=\"d-inline-block align-top\"\n            />{' '}\n            Movie App\n    </Navbar.Brand>\n    </Navbar>\n    </>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\n\nconst MovieCard = props => {\n    return(\n        <Card className=\"bg-dark text-white\" style={{margin:\"20px\"}} id={props.id}>\n        <Card.Img src={props.source} alt=\"Card image\" />\n        <Card.ImgOverlay>\n            <Card.Title>{props.title}</Card.Title>\n            <Card.Text>{props.description}</Card.Text>\n            <Card.Text>{props.rating}</Card.Text>\n        </Card.ImgOverlay>\n    </Card>\n    );\n}\nexport default MovieCard;","import React, {useState} from 'react';\nimport MovieCard from '../MovieCard/MovieCard';\nimport { Button, Modal } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nconst MovieList = (props) => {\n    \n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [movie, setMovie] = useState([{title:\"Papillon\", description:\"Papillon Movie\", rating:4 , source:\"papillon.jpg\"}]);\n    const [Titre,setTitre]=useState('')\n    const [description,setDescription]=useState('')\n    const [rating,setRating]=useState(0)\n    const [src,setSrc]=useState('')\n    const addMovie = (a,b,c,d) => {\n        setMovie([...movie,{title:a, description:b, rating:d, source:c}]) \n        handleClose();\n    };\n        return (\n        <>\n        {\n            movie.filter(el=>el.title.toLowerCase().includes(props.search.toLowerCase())).filter(el=>el.rating >= props.stars).map((el,i) => {\n                return <MovieCard title={el.title} description={el.description} rating={el.rating} source={el.source} id={i} key={i} />;\n            })\n        }\n        <div style={{textAlign:\"center\"}}>\n        <Button variant=\"outline-primary\"  onClick={handleShow}><i className=\"fa fa-plus-square\"></i></Button>\n        <Modal show={show} onHide={handleClose}>\n            <div>\n        <Modal.Header closeButton >\n        <Modal.Title><input type=\"text\" placeholder=\"Movie Title\" size=\"20\" onChange={(event)=>setTitre(event.target.value)}/></Modal.Title>\n        </Modal.Header>\n        <Modal.Body style={{paddingTop:\"20px\"}}>\n            <input type=\"text\" placeholder=\"Movie Description\" size=\"50\" onChange={(event)=>setDescription(event.target.value)} />\n            <hr/>\n            <input type=\"text\" placeholder=\"Movie image destination\" size=\"50\" onChange={(event)=>setSrc(event.target.value)} />\n            <hr/>\n            <input type=\"text\" placeholder=\"Movie Rating\" size=\"20\" onChange={(event)=>setRating(event.target.value)} />\n        </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n        </Button>\n        <Button variant=\"primary\" onClick={()=>addMovie(Titre,description,src,rating)}>\n            Add Movie\n        </Button>\n        </Modal.Footer>\n        </div>\n        </Modal>\n        </div>\n        </>\n        );        \n}\nexport default MovieList;","import React from 'react';\n\nconst Title = () => {\n    return (\n        <h1 style={{fontFamily:\"cursive\",letterSpacing:\"10px\",textAlign:\"center\", marginTop:\"40px\", marginBottom:\"40px\"}}>Movie App</h1>\n    );\n}\n\nexport default Title;","import React, { useState } from 'react';\nimport {Form, FormControl} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from '../NavBar/NavBar';\nimport MovieList from '../MovieList/MovieList';\nimport Title from '../Title/Title';\nimport ReactStars from \"react-rating-stars-component\";\n\nconst MovieComponent = () => {\n    const [search,setSearch]=useState('');\nconst [stars,setStars]=useState(0);\n    const ratingChanged = (newRating) => {\n        setStars(newRating);\n    };\n    return (\n    <>\n    <NavBar />\n    <Title />\n    <Form inline>\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={(e)=>setSearch(e.target.value)}/>\n        <ReactStars\n            count={5} \n            size={24}\n            activeColor=\"#ffd700\"\n            onChange={ratingChanged}\n        />\n    </Form>\n    <MovieList search={search} stars={stars} />\n    </>\n    );\n}\nexport default MovieComponent;","import React from 'react';\nimport './App.css';\nimport MovieComponent from './MovieComponent/MovieComponent';\n\nfunction App() {\n  return (\n    <MovieComponent />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}